version: '3.5'
services:

  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 6 * * *" --cleanup
    env_file:
      - ./qnapdockerfiles/watchtower/secrets.env
    environment:
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=watchtower-qnap

  traefik:
    hostname: traefik
    image: traefik:v2.0 # The official v2.0 Traefik docker image
    container_name: traefik
    restart: always
    depends_on:
      - watchtower
    command:
      #- "--log.level=DEBUG"
      - "--global.sendanonymoususage=false"
      - "--api=true"
      - "--api.dashboard=true"
      - "--api.debug=true"
      - "--ping=true"
      - "--providers.docker=true"
      - "--providers.docker.endpoint=unix:///var/run/docker.sock"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=proxy"
      - "--providers.file.filename=/etc/traefik/traefik_qnap.yml"
      - "--providers.file.watch=true"
      - "--entryPoints.web.address=:80"
      - "--entryPoints.web-secure.address=:443"
      - "--certificatesresolvers.mydnschallenge.acme.dnschallenge=true"
      - "--certificatesresolvers.mydnschallenge.acme.dnschallenge.provider=cloudflare"
      - "--certificatesResolvers.mydnschallenge.acme.dnschallenge.resolvers=1.1.1.1"
      - "--certificatesresolvers.mydnschallenge.acme.email=jeremy@tenfourty.com"
      - "--certificatesresolvers.mydnschallenge.acme.storage=/letsencrypt/acme.json"
    networks:
      - proxy
    dns: 10.10.10.10
    dns_search: tenfourty.site
    ports:
      - 80:80     # The HTTP port - web
      - 443:443   # The HTTPS port - web-secure
      - 8480:8080 # The Web UI (enabled by --api)
    env_file:
      - ./qnapdockerfiles/traefik/secrets.env
    volumes:
      - /share/Container/container-data/letsencrypt:/letsencrypt
      - /share/Container/qnapdockerfiles/traefik/traefik_qnap.yml:/etc/traefik/traefik_qnap.yml
      - /var/run/docker.sock:/var/run/docker.sock # So that Traefik can listen to the Docker events
    #labels:
      #- "traefik.enable=true"
      #- "traefik.http.services.traefik.loadBalancer.server.port=8080"
      #- "traefik.http.routers.traefik.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/traefik`) )"
      #- "traefik.http.routers.traefik_insecure.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/traefik`) )"
      #- "traefik.http.routers.traefik_insecure.middlewares=https-redirect"
      #- "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      #- "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      #- "traefik.http.routers.traefik.entrypoints=web"
      #- "traefik.http.routers.traefik.tls=true"
      #- "traefik.http.routers.traefik.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue



#       - "traefik.exposedByDefault=false"
#      - "traefik.enable=true"
#      - "traefik.backend=traefik"
#      - "traefik.frontend.rule=Host:home.${DOMAINNAME}; PathPrefixStrip: /traefik"
#      - "traefik.port=8080"
#      - "traefik.docker.network=proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
#      - "traefik.frontend.headers.STSSeconds=315360000"
#      - "traefik.frontend.headers.browserXSSFilter=true"
#      - "traefik.frontend.headers.contentTypeNosniff=true"
#      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.STSIncludeSubdomains=true"
#      - "traefik.frontend.headers.STSPreload=true"
#      - "traefik.frontend.headers.frameDeny=true"
#      - "traefik.frontend.auth.basic.usersFile=/etc/traefik/.htpasswd"

#  mariadb:
#    image: "linuxserver/mariadb"
#    container_name: "mariadb"
#    depends_on:
#      - watchtower
#    hostname: mariadb
#    volumes:
#        - /share/Container/container-data/mariadb:/config
#    ports:
#      - target: 3306
#        published: 3306
#        protocol: tcp
#        mode: host
#    restart: always
#    env_file:
#      - ./qnapdockerfiles/mariadb/secrets.env
#    environment:
#      - PUID=0
#      - PGID=0
#      - TZ=Europe/Paris
#    networks:
#      - mariadb
#
## WebUI for MariaDB
#  phpmyadmin:
#    container_name: phpmyadmin
#    image: phpmyadmin/phpmyadmin
#    depends_on:
#      - watchtower
#      - mariadb
#      - traefik
#    restart: always
#    ports:
#      - 8280:80
#    environment:
#      - PMA_HOST=oga2
#    hostname: phpmyadmin
#    domainname: ${DOMAINNAME}
#
## NextCloud Your Own Cloud Storage
#
#  nextcloud_redis:
#    image: redis:alpine
#    container_name: nextcloud_redis
#    restart: always
#    depends_on:
#      - watchtower
#    networks:
#      - nextcloud_app
#
#  nextcloud_app:
#    build: ./qnapdockerfiles/nextcloud/app
#    container_name: nextcloud_app
#    restart: always
#    depends_on:
#      - watchtower
#      - mariadb
#      - nextcloud_redis
#    volumes:
#      - /share/NextCloud:/var/www/html
#    environment:
#      - PUID=0
#      - PGID=0
#    networks:
#      - nextcloud_app
#      - mariadb
#
#  nextcloud_web:
#    build: ./qnapdockerfiles/nextcloud/web
#    container_name: nextcloud_web
#    restart: always
#    depends_on:
#      - watchtower
#      - mariadb
#      - nextcloud_app
#      - traefik
#    expose:
#      - 80
#    links:
#      - nextcloud_app
#    volumes:
#      - /share/NextCloud:/var/www/html:ro
#    networks:
#      - nextcloud_app
#      - traefik_proxy
#    labels:
#      - "traefik.enable=true"
#      - "traefik.backend=nextcloud_web"
#      - "traefik.frontend.rule=Host:nextcloud.${DOMAINNAME}"
#      - "traefik.port=80"
#      - "traefik.protocol=https"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
#      - "traefik.frontend.headers.STSSeconds=315360000"
#      - "traefik.frontend.headers.browserXSSFilter=true"
#      - "traefik.frontend.headers.contentTypeNosniff=true"
#      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.STSIncludeSubdomains=true"
#      - "traefik.frontend.headers.STSPreload=true"
##     - "traefik.frontend.headers.frameDeny=true"
#      - "traefik.frontend.passHostHeader=true"
#
#  nextcloud_cron:
#    build: ./qnapdockerfiles/nextcloud/app
#    container_name: nextcloud_cron
#    restart: always
#    volumes:
#      - /share/NextCloud:/var/www/html
#    entrypoint: /cron.sh
#    depends_on:
#      - watchtower
#      - mariadb
#      - nextcloud_redis
#
##  nextcloud:
##    container_name: nextcloud
##    restart: always
##    image: nextcloud
##    depends_on:
##      - watchtower
##      - mariadb
##      - traefik
##    links:
##      - mariadb:mariadb
##    volumes:
##      - /share/NextCloud/:/var/www/html
##    environment:
##      - PUID=0
##      - PGID=0
###    hostname: nextcloud
###    domainname: ${DOMAINNAME}
###    mac_address: 8E:A5:C8:01:E6:FD
###    dns: ${LOCALDNS}
##    ports:
##      - 9190:443
##    networks:
##      - qnet-dhcp
##      - traefik_proxy
##    labels:
##      - "traefik.enable=true"
##      - "traefik.backend=nextcloud"
##      - "traefik.frontend.rule=Host:nextcloud.${DOMAINNAME}"
##      - "traefik.port=443"
##      - "traefik.protocol=https"
##      - "traefik.docker.network=traefik_proxy"
##      - "traefik.frontend.headers.SSLRedirect=true"
##      - "traefik.frontend.headers.STSSeconds=315360000"
##      - "traefik.frontend.headers.browserXSSFilter=true"
##      - "traefik.frontend.headers.contentTypeNosniff=true"
##      - "traefik.frontend.headers.forceSTSHeader=true"
##      - "traefik.frontend.headers.STSIncludeSubdomains=true"
##      - "traefik.frontend.headers.STSPreload=true"
## #     - "traefik.frontend.headers.frameDeny=true"
##      - "traefik.frontend.passHostHeader=true"
#
  transmission:
    container_name: transmission
    image: haugene/transmission-openvpn:latest
    restart: always
    depends_on:
      - watchtower
      - traefik
    domainname: ${DOMAINNAME}
    hostname: transmission
    cap_add:
      - NET_ADMIN
    devices:
      - "/dev/net/tun"
    ports:
      - 8888:8888
    env_file:
      - ./qnapdockerfiles/transmission/config.env
      - ./qnapdockerfiles/transmission/secrets.env
    volumes:
      - /share/Container/container-data/transmission/:/config:rw
      - /share/Download/transmission/:/data:rw
      - /share/Download/transmission/:/downloads:rw
      - /etc/localtime:/etc/localtime:ro
    dns: ${LOCALDNS}
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.transmission.loadBalancer.server.port=9091"
      - "traefik.http.routers.transmission.rule=Host(`transmission.${DOMAINNAME}`)"
      - "traefik.http.routers.transmission.entrypoints=web-secure"
      - "traefik.http.routers.transmission.tls=true"
      - "traefik.http.routers.transmission.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      - "traefik.http.routers.transmission_insecure.rule=Host(`transmission.${DOMAINNAME}`)"
      - "traefik.http.routers.transmission_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"


#      - "traefik.enable=true"
#      - "traefik.backend=transmission-vpn"
#      - "traefik.frontend.rule=Host:home.${DOMAINNAME}; PathPrefix: /transmission"
#      - "traefik.port=9091"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
#      - "traefik.frontend.headers.STSSeconds=315360000"
#      - "traefik.frontend.headers.browserXSSFilter=true"
#      - "traefik.frontend.headers.contentTypeNosniff=true"
#      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.STSIncludeSubdomains=true"
#      - "traefik.frontend.headers.STSPreload=true"

  sabnzbd:
    container_name: sabnzbd
    image: linuxserver/sabnzbd:latest
    restart: always
    depends_on:
      - watchtower
      - traefik
#    ports:
#       - 8380:8080
#       - 9390:9090
    environment:
      - TZ=Europe/Paris
      - PUID=0 
      - PGID=0
    volumes:
      - /share/Container/container-data/sabnzbd:/config:rw
      - /share/Download/sabnzbd/incomplete-downloads:/incomplete-downloads:rw
      - /share/Download/transmission/completed:/downloads:rw
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.sabnzbd.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/sabnzbd`) )"
      - "traefik.http.routers.sabnzbd_insecure.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/sabnzbd`) )"
      - "traefik.http.routers.sabnzbd_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.sabnzbd.entrypoints=web-secure"
      - "traefik.http.routers.sabnzbd.tls=true"
      - "traefik.http.routers.sabnzbd.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

  couchpotato:
    container_name: couchpotato
    image: linuxserver/couchpotato:latest
    restart: always
    depends_on:
      - watchtower
      - traefik
      - transmission
      - sabnzbd
    environment:
      - TZ=Europe/Paris
      - PUID=0
      - PGID=0
    volumes:
      - /share/Multimedia/Video/Movies:/movies:rw
      - /share/Container/container-data/couchpotato/:/config:rw
      - /share/Download/transmission/:/downloads:rw
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.couchpotato.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/couchpotato`) )"
      - "traefik.http.routers.couchpotato_insecure.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/couchpotato`) )"
      - "traefik.http.routers.couchpotato_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.couchpotato.entrypoints=web-secure"
      - "traefik.http.routers.couchpotato.tls=true"
      - "traefik.http.routers.couchpotato.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

  sonarr:
    image: linuxserver/sonarr
    container_name: sonarr
    restart: always
    depends_on:
      - watchtower
      - traefik
      - transmission
      - sabnzbd
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Paris
      - UMASK_SET=022 #optional
    volumes:
      - /share/Container/container-data/sonarr/:/config:rw
      - /share/Multimedia/Video/TV:/tv:rw
      - /share/Download/transmission/completed/:/downloads:rw
    ports:
      - 8989:8989
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.sonarr.loadBalancer.server.port=8989"
      - "traefik.http.routers.sonarr.rule=Host(`sonarr.${DOMAINNAME}`)"
      - "traefik.http.routers.sonarr_insecure.rule=Host(`sonarr.${DOMAINNAME}`)"
      - "traefik.http.routers.sonarr_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.sonarr.entrypoints=web-secure"
      - "traefik.http.routers.sonarr.tls=true"
      - "traefik.http.routers.sonarr.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.sickchill.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/sonarr`) )"
#      - "traefik.http.routers.sickchill_insecure.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/sonarr`) )"
#      - "traefik.http.routers.sickchill_insecure.middlewares=https-redirect"
#      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
#      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
#      - "traefik.http.routers.sickchill.entrypoints=web-secure"
#      - "traefik.http.routers.sickchill.tls=true"
#      - "traefik.http.routers.sickchill.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

#  sickchill:
#    container_name: sickchill
#    image: linuxserver/sickrage:latest
#    restart: always
#    depends_on:
#      - watchtower
#      - traefik
#      - transmission
#      - sabnzbd
#    environment:
#      - TZ=Europe/Paris
#      - PUID=0
#      - PGID=0
#    volumes:
#      - /share/Multimedia/Video/TV:/tv:rw
#      - /share/Container/container-data/sickrage/:/config:rw
#      - /share/Download/transmission/:/downloads:rw
#    networks:
#      - proxy
#    labels:
#      - "traefik.enable=true"
#      - "traefik.http.routers.sickchill.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/sickchill`) )"
#      - "traefik.http.routers.sickchill_insecure.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/sickchill`) )"
#      - "traefik.http.routers.sickchill_insecure.middlewares=https-redirect"
#      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
#      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
#      - "traefik.http.routers.sickchill.entrypoints=web-secure"
#      - "traefik.http.routers.sickchill.tls=true"
#      - "traefik.http.routers.sickchill.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

#      - "traefik.backend=sickchill"
#      - "traefik.frontend.rule=Host:home.${DOMAINNAME}; PathPrefix: /sickchill"
#      - "traefik.port=8081"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
#      - "traefik.frontend.headers.STSSeconds=315360000"
#      - "traefik.frontend.headers.browserXSSFilter=true"
#      - "traefik.frontend.headers.contentTypeNosniff=true"
#      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.STSIncludeSubdomains=true"
#      - "traefik.frontend.headers.STSPreload=true"
#      - "traefik.frontend.passHostHeader=true"
#      - "traefik.frontend.whiteList.sourceRange=${LOCALNETWORKS}"

  plex:
    container_name: plex
    image: plexinc/pms-docker:plexpass
    restart: always
    depends_on:
      - watchtower
      - traefik
    ports:
      #- 32400:32400/tcp
      - 3005:3005/tcp
      - 8324:8324/tcp
      - 32469:32469/tcp
      - 1900:1900/udp
      - 32410:32410/udp
      - 32412:32412/udp
      - 32414:32414/udp
    environment:
      - TZ=Europe/Paris
      - PLEX_UID=0
      - PLEX_GID=0
      - ADVERTISE_IP=https://plex.tenfourty.site/
    volumes:
      - /share/Container/container-data/plex/config:/config:rw
      - /share/Multimedia:/data:rw
      - /share/Multimedia/PlexTranscode:/transcode:rw
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.plex.loadBalancer.server.port=32400"
      - "traefik.http.routers.plex.rule=Host(`plex.${DOMAINNAME}`)"
      - "traefik.http.routers.plex_insecure.rule=Host(`plex.${DOMAINNAME}`)"
      - "traefik.http.routers.plex_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.plex.entrypoints=web-secure"
      - "traefik.http.routers.plex.tls=true"
      - "traefik.http.routers.plex.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

#      - "traefik.backend=plex"
#      - "traefik.frontend.rule=Host:plex.tenfourty.com"
#      - "traefik.port=32400"
##      - "traefik.protocol=http"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
##      - "traefik.frontend.headers.STSSeconds=315360000"
##      - "traefik.frontend.headers.browserXSSFilter=true"
##      - "traefik.frontend.headers.contentTypeNosniff=true"
##      - "traefik.frontend.headers.forceSTSHeader=true"
##      - "traefik.frontend.headers.STSIncludeSubdomains=true"
##      - "traefik.frontend.headers.STSPreload=true"
##      - "traefik.frontend.headers.frameDeny=true"
##      - "traefik.frontend.passHostHeader=true"


  tautulli:
    container_name: tautulli
    image: linuxserver/tautulli
    restart: always
    depends_on:
      - watchtower
      - traefik
      - plex
    volumes:
      - /share/Container/container-data/tautulli/config:/config
      - /share/Container/container-data/tautulli/logs:/logs:ro
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Paris
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.tautulli.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/tautulli`) )"
      - "traefik.http.routers.tautulli_insecure.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/tautulli`) )"
      - "traefik.http.routers.tautulli_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.tautulli.entrypoints=web-secure"
      - "traefik.http.routers.tautulli.tls=true"
      - "traefik.http.routers.tautulli.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

#      - "traefik.backend=tautulli"
#      - "traefik.frontend.rule=Host:home.${DOMAINNAME}; PathPrefix: /tautulli"
#      - "traefik.port=8181"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
#      - "traefik.frontend.headers.STSSeconds=315360000"
#      - "traefik.frontend.headers.browserXSSFilter=true"
#      - "traefik.frontend.headers.contentTypeNosniff=true"
#      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.STSIncludeSubdomains=true"
#      - "traefik.frontend.headers.STSPreload=true"
#      - "traefik.frontend.passHostHeader=true"

  ombi:
    container_name: ombi
    image: linuxserver/ombi
    restart: always
    depends_on:
      - watchtower
      - traefik
      - plex
#      - sickchill
      - sonarr
      - couchpotato
    volumes:
      - /share/Container/container-data/ombi:/config
    environment:
      - PUID=0
      - PGID=0
      - TZ=Europe/Paris
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ombi.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/ombi`) )"
      - "traefik.http.routers.ombi_insecure.rule=( Host(`home.${DOMAINNAME}`) && PathPrefix(`/ombi`) )"
      - "traefik.http.routers.ombi_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.ombi.entrypoints=web-secure"
      - "traefik.http.routers.ombi.tls=true"
      - "traefik.http.routers.ombi.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue

#      - "traefik.backend=ombi"
#      - "traefik.frontend.rule=Host:home.${DOMAINNAME}; PathPrefix: /ombi"
#      - "traefik.port=3579"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
#      - "traefik.frontend.headers.STSSeconds=315360000"
#      - "traefik.frontend.headers.browserXSSFilter=true"
#      - "traefik.frontend.headers.contentTypeNosniff=true"
#      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.STSIncludeSubdomains=true"
#      - "traefik.frontend.headers.STSPreload=true"
#      - "traefik.frontend.passHostHeader=true"

  organizr:
    container_name: organizr
    image: organizrtools/organizr-v2:php-fpm
    restart: always
    depends_on:
      - watchtower
      - traefik
#      - mariadb
#      - phpmyadmin
##      - nextcloud
      - couchpotato
#      - sickchill
      - sonarr
      - transmission
      - sabnzbd
      - ombi
      - plex
      - tautulli
    volumes:
      - /share/Container/container-data/organizr:/config
    environment:
      - PUID=1001
      - PGID=100
      - TZ=Europe/Paris
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.home.rule=Host(`home.${DOMAINNAME}`)"
      - "traefik.http.routers.home_insecure.rule=Host(`home.${DOMAINNAME}`)"
      - "traefik.http.routers.home_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"
      - "traefik.http.routers.home.entrypoints=web-secure"
      - "traefik.http.routers.home.tls=true"
      - "traefik.http.routers.home.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
#      - "traefik.enable=true"
#      - "traefik.backend=organizr"
#      - "traefik.frontend.rule=Host:home.tenfourty.com"  
#      - "traefik.port=80"
#      - "traefik.docker.network=traefik_proxy"
#      - "traefik.frontend.headers.SSLRedirect=true"
#      - "traefik.frontend.headers.STSSeconds=315360000"
#      - "traefik.frontend.headers.browserXSSFilter=true"
#      - "traefik.frontend.headers.contentTypeNosniff=true"
#      - "traefik.frontend.headers.forceSTSHeader=true"
#      - "traefik.frontend.headers.SSLHost=home.tenfourty.com"
#      - "traefik.frontend.headers.STSIncludeSubdomains=true"
#      - "traefik.frontend.headers.STSPreload=true"
#      - "traefik.frontend.headers.frameDeny=true"

  insync-app:
    image: tiredofit/insync
    container_name: insync-app
    restart: always
    depends_on:
      - watchtower
    environment:
      - INSYNC1_USERNAME=jeremy@tenfourty.com
      - INSYNC1_DOWNLOAD=ms-office
    volumes:
      - /share/Jeremy/GDrive:/data

  homeassistant:
    container_name: home-assistant
    image: homeassistant/home-assistant:stable
    depends_on:
      - traefik
      - watchtower
    volumes:
      - /share/Container/container-data/homeassistant:/config
    devices:
      - /dev/ttyACM0:/dev/ttyACM0
    environment:
      - TZ=Europe/Paris
    restart: always
#    network_mode: host
    ports:
      - 8123:8123
      - 1400:1400
    networks:
      - proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.services.homeassistant.loadBalancer.server.port=8123"
      - "traefik.http.routers.homeassistant.rule=Host(`homeassistant.${DOMAINNAME}`)"
      - "traefik.http.routers.homeassistant.entrypoints=web-secure"
      - "traefik.http.routers.homeassistant.tls=true"
      - "traefik.http.routers.homeassistant.tls.certresolver=mydnschallenge" # Uses the Host rule to define which certificate to issue
      - "traefik.http.routers.homeassistant_insecure.rule=Host(`homeassistant.${DOMAINNAME}`)"
      - "traefik.http.routers.homeassistant_insecure.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"
      - "traefik.http.middlewares.https-redirect.redirectscheme.permanent=true"

# https://qnap-dev.github.io/container-station-api/index.html
networks:

#  mariadb:
#    external: true
#    driver_opts:
#      encrypted: 1
#
#  nextcloud_app:
#    external: true
#    driver_opts:
#      encrypted: 1

# docker network create proxy
  proxy:
    external: true
    name: proxy

