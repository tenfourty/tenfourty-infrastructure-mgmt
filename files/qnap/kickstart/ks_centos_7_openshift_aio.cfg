# Kickstart file for my OpenShift All-In-One Virtual Machine

install
url --url http://192.168.1.1/repos/CentOS/7/os/x86_64/
graphical
eula --agreed
logging --level=debug
unsupported_hardware

repo --install --name=base --baseurl=http://192.168.1.1/repos/CentOS/7/os/x86_64/
repo --install --name=updates --cost=1 --baseurl=http://192.168.1.1/repos/CentOS/7/updates/x86_64/
repo --install --name=extras --cost=1 --baseurl=http://192.168.1.1/repos/CentOS/7/extras/x86_64/
repo --install --name=epel-release --cost=1 --baseurl=http://192.168.1.1/repos/epel/7/x86_64/

lang en_UK.UTF-8 --addsupport=en_US
keyboard us
timezone --utc Europe/Paris

network --device=link --activate --onboot=true --bootproto=dhcp --hostname=openshift

rootpw --plaintext pxetest
authconfig --enablecache --enableldap --enableldapauth --ldapserver=192.168.1.1 --ldapbasedn=cn=admin,dc=ldap,dc=oga,dc=local --disableldaptls

%addon com_redhat_kdump --enable --reserve-mb=auto
%end

autopart
clearpart --all
zerombr

firewall --enabled --ssh --http

firstboot --disable
reboot

%packages --nobase
#do not install base
@Core --nodefaults
rpm
perl
bash
procps
sed
bc
grep
tar
yum
hostname
chkconfig
python
ntp
nss
curl
wget
sudo
python-setuptools
libselinux-python
PyYAML
libyaml
python-babel
python-markupsafe
python-pyasn1
python-six
unzip
rsync
ed
patch
ntp
ca-certificates
net-tools
apr
apr-util
httpd-tools
boost-program-options
cyrus-sasl
libibverbs
librdmacm
xerces-c
uuid
git
zile
docker-1.13.1
bind-utils 
iptables-services
bridge-utils
bash-completion
kexec-tools
sos
psacct
openssl-devel
NetworkManager
python-cryptography
python2-pip
python-devel
python-passlib
java-1.8.0-openjdk-headless 
"@Development Tools"
# we need ldap to allow ldap login
nss-pam-ldapd
# vagrant needs openssh-clients to copy initial files via scp
openssh-clients
# Additional Prerequisites for installing VMware Tools or VirtualBox guest additions.
# Put in kickstart to ensure first version installed is from install disk,
# not latest from a mirror.
kernel-headers
kernel-devel
gcc
make
bzip2
%end

%post
rpm --import http://192.168.1.1/repos/CentOS/RPM-GPG-KEY-CentOS-7
rpm --import http://192.168.1.1/repos/epel/RPM-GPG-KEY-EPEL-7

# set some settings based on this article: https://tobert.github.io/post/2014-06-24-linux-defaults.html

# tell the kernel to only swap if it really needs it
echo "vm.swappiness = 1" >> /etc/sysctl.conf
# increase the number of allowed mmapped files
echo "vm.max_map_count = 1048576" >> /etc/sysctl.conf
# increase the number of file handles available globally
echo "fs.file-max = 1048576" >> /etc/sysctl.conf
# allow up to 999999 processes with corresponding pids
# this looks nice and rarely rolls over - I've never had a problem with it
# 999999 is unnecessary, but I like it
echo "kernel.pid_max = 999999" >> /etc/sysctl.conf
# seconds to delay after a kernel panic and before rebooting automatically
echo "kernel.panic = 300" >> /etc/sysctl.conf

# do not enable if your machines are not physically secured
# this can be used to force reboots, kill processses, cause kernel crashes, etc without logging in
# but it's very handy when a machine is hung and you need to get control
# that said, I always enable it
echo "kernel.sysrq = 1" >> /etc/sysctl.conf

# These are improved defaults for opening up the Linux network stack. I recommend Googling "Linux C10k" to learn more about what they mean.
echo "net.ipv4.ip_local_port_range = 10000 65535" >> /etc/sysctl.conf
echo "net.ipv4.tcp_window_scaling = 1" >> /etc/sysctl.conf
echo "net.ipv4.tcp_rmem = 4096 87380 16777216" >> /etc/sysctl.conf
echo "net.ipv4.tcp_wmem = 4096 65536 16777216" >> /etc/sysctl.conf
echo "net.core.rmem_max = 16777216" >> /etc/sysctl.conf
echo "net.core.wmem_max = 16777216" >> /etc/sysctl.conf
echo "net.core.netdev_max_backlog = 2500" >> /etc/sysctl.conf
echo "net.core.somaxconn = 65000" >> /etc/sysctl.conf

# these will need local tuning, currently set to start flushing dirty pages at 256MB
# writes will start blocking at 2GB of dirty data, but this should only ever happen if
# your disks are far slower than your software is writing data
# If you have an older kernel, you will need to s/bytes/ratio/ and adjust accordingly.
echo "vm.dirty_background_bytes = 268435456" >> /etc/sysctl.conf
echo "vm.dirty_bytes = 1073741824" >> /etc/sysctl.conf

# I think the whole pam limits business is useless on single-user systems
# (e.g. workstations, database servers), so I effectively disable it.
echo "* - nofile     1048576" >> /etc/security/limits.conf
echo "* - memlock    unlimited" >> /etc/security/limits.conf
echo "* - fsize      unlimited" >> /etc/security/limits.conf
echo "* - data       unlimited" >> /etc/security/limits.conf
echo "* - rss        unlimited" >> /etc/security/limits.conf
echo "* - stack      unlimited" >> /etc/security/limits.conf
echo "* - cpu        unlimited" >> /etc/security/limits.conf
echo "* - nproc      unlimited" >> /etc/security/limits.conf
echo "* - as         unlimited" >> /etc/security/limits.conf
echo "* - locks      unlimited" >> /etc/security/limits.conf
echo "* - sigpending unlimited" >> /etc/security/limits.conf
echo "* - msgqueue   unlimited" >> /etc/security/limits.conf

# update ca-certificates
yum -y upgrade ca-certificates

# Install Ansible
yum -y install ansible

# Update everything
yum -y update

%end

